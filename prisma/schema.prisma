// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  clerkUserId      String             @unique
  name             String
  username         String             @unique
  number           String
  bio              String
  role             Role               @default(USER)
  dateOfBirth      DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  productPurchases ProductPurchase[]  // One-to-many relation
  productSelling   ProductSelling[]   // One-to-many relation
  notifications    Notification[]     // Added relation to Notification
  crates           Crate[]            // Added relation to Crate
  car              Car[]
  invoices         InvoiceTable[]
  payments         Payment[]
}

enum Role {
  USER
  ADMIN
  MODERATOR
  MEMBER
}

model Company {
  id               Int                @id @default(autoincrement())
  clerkUserId      String
  name             String
  address          String
  phone            String
  email            String
  website          String
  gst              String
  upi              String?
  bankName         String?
  accountNumber    String?
  ifsc             String?
  extraDetails     String?
  fssai            String?
  logoUrl          String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  productPurchases ProductPurchase[]  // One-to-many relation
  invoices         InvoiceTable[]     @relation(name: "CompanyInvoices")
}

model Seller {
  id               Int                @id @default(autoincrement())
  clerkUserId      String
  name             String
  address          String
  email            String             @unique
  number           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  productPurchases ProductPurchase[]  // One-to-many relation
}

model ProductPurchase {
  id              Int               @id @default(autoincrement())
  clerkUserId     String
  companyId       Int
  sellerId        Int
  productName     String
  productQuantity Int
  purchaseAmount  Float
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  status          String            @default("not deducted") // Add the status field
  company         Company           @relation(fields: [companyId], references: [id])
  seller          Seller            @relation(fields: [sellerId], references: [id])
  user            User              @relation(fields: [clerkUserId], references: [clerkUserId])
  productSelling  ProductSelling[]  // Add one-to-one relation
  received        Int?
  leaf            Int?
  rej             Int?
  shortage        Int?
  kantaWeight     Int?
  truckNumber     String?
  chNo            String?
  fare            Float?
  remarks         String?
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    String
  message   String
  type      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [clerkUserId])

  @@index([userId])
}

model Crate {
  id                Int                @id @default(autoincrement())
  crateId           String
  crateName         String
  crateQuantity     Int
  clerkUserId       String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  invoiceItems      InvoiceItem[]
  user              User               @relation(fields: [clerkUserId], references: [clerkUserId])
}

model ProductSelling {
  id                Int             @id @default(autoincrement())
  clerkUserId       String
  productPurchaseId Int
  sellingPrice      Float
  unit              String
  quantity          Int // Added quantity field
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  productPurchase   ProductPurchase @relation(fields: [productPurchaseId], references: [id])
  user              User            @relation(fields: [clerkUserId], references: [clerkUserId])
  invoiceItems      InvoiceItem[]
}

model Customer {
  id          Int            @id @default(autoincrement())
  clerkUserId String
  name        String
  email       String
  phone       String
  address     String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  invoices    InvoiceTable[] @relation(name: "CustomerInvoices")

  @@index([clerkUserId])
}

model Car {
  id            Int            @id @default(autoincrement())
  clerkUserId   String
  carName       String
  carNumber     String
  driverName    String
  driverLicense String
  driverPhone   String
  carModel      String?
  carColor      String?
  carType       String?
  status        String         @default("active")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [clerkUserId], references: [clerkUserId])
  invoice       InvoiceTable[]

  @@index([clerkUserId])
}

model InvoiceTable {
  id            Int           @id @default(autoincrement())
  companyId     Int
  clientId      Int
  igst          Float
  cgst          Float
  sgst          Float
  totalAmount   Float
  netAmount     Float
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  amountPaid    Float         @default(0)
  createdAt     DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime      @updatedAt @db.Timestamptz(6)
  isConfirmed   Boolean       @default(false)
  userId        String
  carId         Int? // Ensure you have a carId field if needed
  carDetails    Car?          @relation(fields: [carId], references: [id])
  xata_id       String        @unique @default(dbgenerated("('rec_'::text || (gen_random_uuid())::text)"))
  xata_version  Int           @default(0)
  xata_createdat DateTime      @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime      @default(now()) @db.Timestamptz(6)
  // Relations
  company       Company       @relation(fields: [companyId], references: [id], name: "CompanyInvoices")
  client        Customer      @relation(fields: [clientId], references: [id], name: "CustomerInvoices")
  payments      Payment[]     @relation("InvoicePayments")
  user          User          @relation(fields: [userId], references: [clerkUserId])
  invoiceItems  InvoiceItem[] // New one-to-many relation for invoice items
}

model InvoiceItem {
  id            Int          @id @default(autoincrement())
  invoiceId     Int
  productId     Int
  productName   String
  quantity      Int
  unit          String
  crateId       Int?
  crateName     String?
  crateQuantity Int?
  invoice       InvoiceTable @relation(fields: [invoiceId], references: [id])
  product       ProductSelling @relation(fields: [productId], references: [id])
  crate         Crate?       @relation(fields: [crateId], references: [id])
  
  // Add these new fields:
  unitPrice     Float // Store the unit price of the product
  totalPrice    Float // Store the total price (unitPrice * quantity)

  @@index([invoiceId])
  @@index([productId])
  @@index([crateId])
}

model Payment {
  id            Int          @id @default(autoincrement())
  invoiceId     Int
  amount        Float
  paymentDate   DateTime     @default(now()) @db.Timestamptz(6)
  paymentMethod String
  createdAt     DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime     @updatedAt @db.Timestamptz(6)
  userId        String
  // Relations
  invoice       InvoiceTable @relation(fields: [invoiceId], references: [id], name: "InvoicePayments")
  user          User         @relation(fields: [userId], references: [clerkUserId])

  @@index([invoiceId])
  @@index([userId])
}

enum PaymentStatus {
  PAID
  PENDING
  UNPAID
}

enum EditStatus {
  NOT_EDITED
  EDITED
}

enum DeductStatus {
  NOT_DEDUCTED
  DEDUCTED
}
